<?xml version="1.0"?>  

<!-- c182s fuel system according to POH 7-25
The left and right wing are connected to the fuel selector valve. both tanks have a drain valve.
The fuel selector has a small fuel sump which is fed from the selected tanks using gravity.
From there the fuel flows to a strainer (also with small sump) and to the electrical aux pump
and then to the mechanical (enginge driven) pump which pumps it to the fuel/air control unit.
At the fuel/air unit sits the fuel flow meter. From there the fuel is delivered to the engines
intake manifods.

Implementation notice:
- The idea is to treat every item that holds fuel as independent tank.
- The tanks have drains: /controls/fuel/tank[n]/drain-valve (1=open/0=shut)
- Switches define possible valves and define the ammount and conditions of flow.
- Summers define the outflow/inflow of the whole tank and depend on linked valves;
  they are just there to let jsbsim handle the content ammount. This way a tank can
  simultaneously be drained+refuelled+whatever.
- internal system flow rate s synchronized to 0.5pps for now.

Author: 09/2017  Benedikt Hallinger
-->
<system name="fuel">
    <property type="double" value="0">/controls/engines/engine[0]/mixture-lever</property>
    <property type="bool" value="0">/controls/fuel/tank[0]/drain-valve</property>
    <property type="bool" value="0">/controls/fuel/tank[1]/drain-valve</property>
    <property type="bool" value="0">/controls/fuel/tank[2]/drain-valve</property>
    <property type="bool" value="0">/controls/fuel/tank[3]/drain-valve</property>
    
    <property type="double" value="0">fuel/fuel-selector-sump-drain-flow-rate-pps</property>
    <property type="double" value="0">fuel/fuel-strainer-sump-drain-flow-rate-pps</property>
    <property type="double" value="0">fuel/flow-left-right-transfer-calculated-pps</property>
    <property type="double" value="0">fuel/manifold-flooded-empty-cranking-rate-throttle-pps</property>
    
    <property type="bool" value="1">/systems/fuel/fuel-pump-aux-serviceable</property>
    <property type="bool" value="1">/systems/fuel/fuel-pump-engine-serviceable</property>
    <property type="bool" value="1">/systems/fuel/fuel-pipe-serviceable</property>
    <property type="double" value="0">/systems/fuel/tank[0]/leak-flow-rate-pps</property>
    <property type="double" value="0">/systems/fuel/tank[1]/leak-flow-rate-pps</property>
    <property type="double" value="0">/systems/fuel/tank[2]/leak-flow-rate-pps</property>
    <property type="double" value="0">/systems/fuel/tank[3]/leak-flow-rate-pps</property>
    <property type="double" value="0">/systems/fuel/tank[4]/leak-flow-rate-pps</property> <!-- currently implicitely set via fuel-pipe-serviceable -->
    <property type="double" value="0">/systems/fuel/tank[5]/leak-flow-rate-pps</property>
    
    <property type="double" value="0">/systems/fuel/priming-temperature-threshold</property>
    <property type="double" value="0">/systems/fuel/priming-mixture-flow-pps</property>
    <property type="double" value="0">/systems/fuel/priming-mixture-flow-gph</property>
    <property type="bool" value="0">/systems/fuel/engine-primed</property>
    <property type="bool" value="0">/systems/fuel/engine-flooded</property>
    
    <property type="double" value="0">/systems/fuel/indicated-manfold-fuel-flow-gph</property>

    
    <channel name="fuel-system">
        <!-- property: /fdm/jsbsim/propulsion/tank[n]/external-flow-rate-pps -->
       
        
        <!-- ######################### -->
        <!-- ###### 0: LEFT TANK ##### -->
        <!-- ######################### -->
        <switch name="fuel/left-tank-drain-flow-rate-pps">
            <default value="0"/>
            <test logic="AND" value="25">
                /controls/fuel/tank[0]/drain-valve EQ 1
            </test>
        </switch>
        <switch name="fuel/left-tank-tofuelselector-flow-rate-pps">
            <default value="0"/>
  
            <!-- lower drain open? -->
            <test logic="AND" value="fuel/fuel-selector-sump-drain-flow-rate-pps">
                <switch logic="AND">
                    /fdm/jsbsim/propulsion/tank[0]/pct-full     GT    0.0
                    /fdm/jsbsim/propulsion/tank[2]/pct-full     LT   90.0
                    fuel/fuel-selector-sump-drain-flow-rate-pps GT    0
                </switch>
                <switch logic="OR">
                    /controls/switches/fuel_tank_selector EQ 3
                    /controls/switches/fuel_tank_selector EQ 2
                </switch>
            </test>
            <test logic="AND" value="fuel/fuel-strainer-sump-drain-flow-rate-pps">
                <switch logic="AND">
                    /fdm/jsbsim/propulsion/tank[0]/pct-full     GT    0.0
                    /fdm/jsbsim/propulsion/tank[2]/pct-full     LT   90.0
                    fuel/fuel-strainer-sump-drain-flow-rate-pps GT    0
                </switch>
                <switch logic="OR">
                    /controls/switches/fuel_tank_selector EQ 3
                    /controls/switches/fuel_tank_selector EQ 2
                </switch>
            </test>
            
            <!-- normal operation -->
            <test logic="AND" value="0.5"> <!-- left selected -->
                /controls/switches/fuel_tank_selector EQ 3
                /fdm/jsbsim/propulsion/tank[0]/pct-full  GT    0.0
                /fdm/jsbsim/propulsion/tank[2]/pct-full  LT  90.0
            </test>
            <test logic="AND" value="0.25"> <!-- both selected -->
                /controls/switches/fuel_tank_selector EQ 2
                /fdm/jsbsim/propulsion/tank[0]/pct-full  GT    0.0
                /fdm/jsbsim/propulsion/tank[2]/pct-full  LT  90.0
            </test>
        </switch>
 
        <summer name="fuel/left-wing-total-flow-pps">
            <input>-fuel/left-tank-drain-flow-rate-pps</input>
            <input>-/systems/fuel/tank[0]/leak-flow-rate-pps</input>
            <input>-fuel/flow-left-right-transfer-pps</input>
            <input>-fuel/left-tank-tofuelselector-flow-rate-pps</input>
            <output>/fdm/jsbsim/propulsion/tank[0]/external-flow-rate-pps</output>
        </summer>
        
        
        
        
        <!-- ########################## -->
        <!-- ###### 1: RIGHT TANK ##### -->
        <!-- ########################## -->
        <switch name="fuel/right-tank-drain-flow-rate-pps">
            <default value="0"/>
            <test logic="AND" value="25">
                /controls/fuel/tank[1]/drain-valve EQ 1
            </test>
        </switch>
        <switch name="fuel/right-tank-tofuelselector-flow-rate-pps">
            <default value="0"/>
            
            <!-- lower drain open? -->
            <test logic="AND" value="fuel/fuel-selector-sump-drain-flow-rate-pps">
                <switch logic="AND">
                    /fdm/jsbsim/propulsion/tank[1]/pct-full     GT   0.0
                    /fdm/jsbsim/propulsion/tank[2]/pct-full     LT  90.0
                    fuel/fuel-selector-sump-drain-flow-rate-pps GT   0
                </switch>
                <switch logic="OR">
                    /controls/switches/fuel_tank_selector EQ 1
                    /controls/switches/fuel_tank_selector EQ 2
                </switch>
            </test>
            <test logic="AND" value="fuel/fuel-strainer-sump-drain-flow-rate-pps">
                <switch logic="AND">
                    /fdm/jsbsim/propulsion/tank[1]/pct-full     GT   0.0
                    /fdm/jsbsim/propulsion/tank[2]/pct-full     LT  90.0
                    fuel/fuel-strainer-sump-drain-flow-rate-pps GT   0
                </switch>
                <switch logic="OR">
                    /controls/switches/fuel_tank_selector EQ 1
                    /controls/switches/fuel_tank_selector EQ 2
                </switch>
            </test>
            
            <!-- normal operation -->
            <test logic="AND" value="0.5"> <!-- right selected -->
                /controls/switches/fuel_tank_selector EQ 1
                /fdm/jsbsim/propulsion/tank[1]/pct-full  GT    0.0
                /fdm/jsbsim/propulsion/tank[2]/pct-full  LT  90.0
            </test>
            <test logic="AND" value="0.25"> <!-- both selected -->
                /controls/switches/fuel_tank_selector EQ 2
                /fdm/jsbsim/propulsion/tank[1]/pct-full  GT    0.0
                /fdm/jsbsim/propulsion/tank[2]/pct-full  LT  90.0
            </test>
        </switch>
        
        <summer name="fuel/right-wing-total-flow-pps">
            <input>-fuel/right-tank-drain-flow-rate-pps</input>
            <input>-/systems/fuel/tank[1]/leak-flow-rate-pps</input>
            <input>-fuel/right-tank-tofuelselector-flow-rate-pps</input>
            <input>fuel/flow-left-right-transfer-pps</input>
            <output>/fdm/jsbsim/propulsion/tank[1]/external-flow-rate-pps</output>
        </summer>
        
        
        
        
        <!-- TRANSFER BETWEEN TANKS -->
        <!-- when the fuel selection lever is BOTH, the tanks should slowly level out. -->
        <switch name="fuel/flow-left-right-transfer-pps">
            <default value="0"/>
            <test logic="AND" value="fuel/flow-left-right-transfer-calculated-pps">
                /fdm/jsbsim/propulsion/tank[0]/pct-full GT 1.0
                /fdm/jsbsim/propulsion/tank[1]/pct-full LT 99.0
                /controls/switches/fuel_tank_selector EQ 2
            </test>
            <test logic="AND" value="fuel/flow-left-right-transfer-calculated-pps">
                /fdm/jsbsim/propulsion/tank[1]/pct-full GT 1.0
                /fdm/jsbsim/propulsion/tank[0]/pct-full LT 99.0
                /controls/switches/fuel_tank_selector EQ 2
            </test>
        </switch>
        
        <switch name="fuel/flow-left-right-transfer-limited-accelerations-Ny">
            <!-- limit accelerations/Ny so only significant values will be considered -->
            <default value="0.0"/>
            <test logic="OR" value="accelerations/Ny">
                accelerations/Ny LE -0.015
                accelerations/Ny GT  0.015
            </test>
        </switch>
        
        <fcs_function name="fuel/flow-left-right-transfer-left-tank-gforce-tgt-value">
            <function>
                <sum>
                    <quotient>
                        <sum>
                            <property>/fdm/jsbsim/propulsion/tank[0]/pct-full</property>
                            <property>/fdm/jsbsim/propulsion/tank[1]/pct-full</property>
                        </sum>
                        <value>2</value>
                    </quotient>
                    <product>
                        <quotient>
                            <sum>
                                <property>/fdm/jsbsim/propulsion/tank[0]/pct-full</property>
                                <property>/fdm/jsbsim/propulsion/tank[1]/pct-full</property>
                            </sum>
                            <value>2</value>
                        </quotient>
                        <property>fuel/flow-left-right-transfer-limited-accelerations-Ny</property>
                        <!--<value>10</value>-->
                    </product>
                </sum>
            </function>
            <clipto>
                <min>0</min>
                <max>100</max>
            </clipto>
            <!--<output>fuel/flow-left-right-transfer-left-tank-gforce-tgt-value</output>   -->
        </fcs_function>
        
        
        <fcs_function name="fuel/flow-left-right-transfer-tanks-difference">
            <function>
                <difference>
                    <property>/fdm/jsbsim/propulsion/tank[0]/pct-full</property>
                    <property>fuel/flow-left-right-transfer-left-tank-gforce-tgt-value</property>
                </difference>
            </function>
            <output>fuel/flow-left-right-transfer-tanks-difference</output>   
        </fcs_function>
        
        <fcs_function name="fuel/flow-left-right-transfer-calculated-pps">
            <function>
                <table>
                    <independentVar lookup="row">fuel/flow-left-right-transfer-tanks-difference</independentVar>
                    <tableData>
                        <!-- TODO: flow rate is arbitary! should be fixed with real world values some day -->
                        -10.0   -0.25
                         -2.0   -0.05
                          0.0    0.0
                          2.0    0.05
                         10.0    0.25
                    </tableData>
                </table>
            </function>
            <output>fuel/flow-left-right-transfer-calculated-pps</output>   
        </fcs_function>
        
        
        <!-- ################################# -->
        <!-- ##### 2: FUEL SELECTOR SUMP ##### -->
        <!-- ################################# -->
        <!-- fuel selector position: 0=off, 1=right, 2=both, 3=left (/controls/switches/fuel_tank_selector) -->
        <switch name="fuel/fuel-selector-sump-drain-flow-rate-pps">
            <default value="0"/>
            <test logic="AND" value="25">
                /controls/fuel/tank[2]/drain-valve EQ 1
            </test>
        </switch>
        <switch name="fuel/fuel-selector-tofuelstrainer-flow-rate-pps">
            <default value="0"/>
            
            <!-- lower drain open? -->
            <test logic="AND" value="fuel/fuel-strainer-sump-drain-flow-rate-pps">
                /fdm/jsbsim/propulsion/tank[2]/pct-full     GT   0.0
                /fdm/jsbsim/propulsion/tank[3]/pct-full     LT  90.0
                fuel/fuel-strainer-sump-drain-flow-rate-pps GT   0
            </test>
            
            <!-- normal operation -->
            <test logic="AND" value="0.5">
                /fdm/jsbsim/propulsion/tank[2]/pct-full  GT  10.0
                /fdm/jsbsim/propulsion/tank[3]/pct-full  LT  90.0
            </test>
        </switch>
        
        <summer name="fuel/fuel-selector-total-flow-pps">
            <input>fuel/left-tank-tofuelselector-flow-rate-pps</input>
            <input>fuel/right-tank-tofuelselector-flow-rate-pps</input>
            <input>-fuel/fuel-selector-tofuelstrainer-flow-rate-pps</input>
            <input>-fuel/fuel-selector-sump-drain-flow-rate-pps</input>
            <input>-/systems/fuel/tank[2]/leak-flow-rate-pps</input>
            <output>/fdm/jsbsim/propulsion/tank[2]/external-flow-rate-pps</output>
        </summer>

        
        
        
        <!-- ################################# -->
        <!-- ##### 3: FUEL STRAINER SUMP ##### -->
        <!-- ################################# -->
        <switch name="fuel/fuel-strainer-sump-drain-flow-rate-pps">
            <default value="0"/>
            <test logic="AND" value="25">
                /controls/fuel/tank[3]/drain-valve EQ  1
            </test>
        </switch>
        <switch name="fuel/fuel-strainer-tofuelpipe-flow-rate-pps">
            <default value="0"/>
            <!-- TODO: insert leakage of fuel pipe code here -->
            <test logic="AND" value="0.5">
                /fdm/jsbsim/propulsion/tank[3]/pct-full  GT  10.0
                /fdm/jsbsim/propulsion/tank[4]/pct-full  LT  90.0
                accelerations/Nz GE -0.05
            </test>
        </switch>
        
        <summer name="fuel/fuel-strainer-total-flow-pps">
            <input>fuel/fuel-selector-tofuelstrainer-flow-rate-pps</input>
            <input>-fuel/fuel-strainer-tofuelpipe-flow-rate-pps</input>
            <input>-fuel/fuel-strainer-sump-drain-flow-rate-pps</input>
            <input>-/systems/fuel/tank[3]/leak-flow-rate-pps</input>
            <output>/fdm/jsbsim/propulsion/tank[3]/external-flow-rate-pps</output>
        </summer>

        
        
        <!-- ####################### -->
        <!-- ##### 4: FUEL PIPE #### -->
        <!-- ####################### -->
        <!-- When not serviceable (i.e. broken), a leakage will occur and no fuel can be pumped -->
        <switch name="/systems/fuel/tank[4]/leak-flow-rate-pps">
            <default value="0"/>
            <test logic="AND" value="5">   <!-- limited by the flow rates of preceeding tanks -->
                /systems/fuel/fuel-pipe-serviceable EQ 0
            </test>
        </switch>
        <summer name="fuel/fuel-pipe-total-flow-pps">
            <input>-/systems/fuel/tank[4]/leak-flow-rate-pps</input>
            <input>fuel/fuel-strainer-tofuelpipe-flow-rate-pps</input>
            <input>-fuel/pump-flow-rate-pps</input>
            <output>/fdm/jsbsim/propulsion/tank[4]/external-flow-rate-pps</output>
        </summer>
        
            
            
        <!-- ####################### -->
        <!-- ##### FUEL PUMPING #### -->
        <!-- ####################### -->
        <!-- The fuel pumps fill the manifold from the fuel pipe. Fill rate >= treshold means engine flooded. -->
        <switch name="fuel/pump-flow-rate-pps">
            <default value="0"/>
            
            <test logic="AND" value="0.5">
                <!-- always allow fuel flow when engine procedures are off -->
                /engines/engine/complex-engine-procedures  EQ  0
                /fdm/jsbsim/propulsion/tank[4]/pct-full    GT  10.0
                /fdm/jsbsim/propulsion/tank[5]/pct-full    LT  45.0
            </test>
            
            <!-- fuel pipe broken? no fuel to manifold! -->
            <test logic="AND" value="0">
                /systems/fuel/fuel-pipe-serviceable  EQ  0
            </test>
            
            <!-- Engine on: mechanical pump OR aux pump active -->
            <test logic="AND" value="0.5">
                <test logic="AND">
                    <!-- engine running and fuel flow possible -->
                    /fdm/jsbsim/propulsion/engine/set-running  EQ   1
                    /fdm/jsbsim/propulsion/tank[4]/pct-full    GT  10.0
                    /fdm/jsbsim/propulsion/tank[5]/pct-full    LT  45.0 <!-- this threshold roughly defines how much fuel is left after engine shutdown -->
                </test>
                <test logic="OR">
                    <test logic="AND">
                        <!-- motor pump is serviceable -->
                        /systems/fuel/fuel-pump-engine-serviceable EQ   1
                    </test>
                    <test logic="AND">
                        <!-- motor pump failed but aux pump is switched on and serviceable -->
                        /systems/electrical/outputs/fuel-pump      GT   0
                        /systems/fuel/fuel-pump-aux-serviceable    EQ   1
                    </test>
                </test>
            </test>
            
            <!-- Engine off: Priming mode -->
            <!-- The pps-property is used to fill the manifold tank -->
            <test logic="AND" value="/systems/fuel/priming-mixture-flow-pps">
                <!-- engine off: aux pump on and powered? -->
                /fdm/jsbsim/propulsion/engine/set-running  EQ   0
                /systems/electrical/outputs/fuel-pump      GT   0
                /systems/fuel/fuel-pump-aux-serviceable    EQ   1
                /fdm/jsbsim/propulsion/tank[4]/pct-full    GT   1.0
                /fdm/jsbsim/propulsion/tank[5]/pct-full    LT 100.0
            </test>
        </switch>

         
        
        <!-- ###################### -->
        <!-- ##### 5: MANIFOLD #### -->
        <!-- Engine sucks here (max=0.035pps). The only inflow can come from an active pump. -->
        <!-- Special is also, that the mechanical pump can only fill this tank to the flood-threshold. -->
        <!-- The electrical pump can fill it fully; whereas a threshold signals "engine flooded" -->
        <switch name="fuel/manifold-dissipate-rate-pps">
            <!-- fuel evaporates slowly when engine not running -->
            <default value="0"/>
            <test logic="AND" value="0.0000110"> <!-- about 0.020p in 30 min -->
                /fdm/jsbsim/propulsion/engine/set-running  EQ   0
                <!--/systems/electrical/outputs/fuel-pump      EQ   0 -->
            </test>
        </switch>
        <summer name="fuel/manifold-total-flow-pps">
            <input>fuel/pump-flow-rate-pps</input>
            <input>-/systems/fuel/tank[5]/leak-flow-rate-pps</input>
            <input>-fuel/manifold-dissipate-rate-pps</input>
            <input>-fuel/manifold-flooded-empty-cranking-rate-pps</input>
            <!--    <input>-/fdm/jsbsim/propulsion/engine/fuel-flow-rate-pps</input>   NOT NECESSARY: engine sucks already (see feed command) -->
            <output>/fdm/jsbsim/propulsion/tank[5]/external-flow-rate-pps</output>
        </summer>
        
        

        
        <!-- ########################## -->
        <!-- #  Priming stuff         # -->
        <!-- ########################## -->
        <!-- Priming is simulated using the manifold tank level, jsbsim priority and mixture-->
        
        <!-- Engine flooded indicator -->
        <switch name="/systems/fuel/engine-flooded">
            <default value="0"/>
            <test logic="AND" value="1">
                /fdm/jsbsim/propulsion/tank[5]/pct-full  GT  75.0
            </test>
        </switch>
        
        <!-- Engine can start / is adequately primed indicator -->
        <switch name="/systems/fuel/engine-primed">
            <default value="0"/>
            <test logic="AND" value="1">
                <!-- Engine is cold: priming required -->
                /fdm/jsbsim/propulsion/tank[5]/pct-full  GT  /systems/fuel/priming-temperature-threshold
            </test>
        </switch> 
        
        <!-- set manifold tank priority according to priming state -->
        <!-- (engine will get no fuel unless properly primed) -->
        <switch name="/systems/fuel/engine-can-start">
            <default value="1"/>
            <test logic="AND" value="1">
                <!-- always allow engine start when engine procedures are off -->
                /engines/engine/complex-engine-procedures EQ 0
            </test>
            <test logic="AND" value="0">
                <!-- Engine killed? then never feed fuel! -->
                /engines/engine[0]/killed EQ 1
            </test>
            <test logic="AND" value="0">
                <test logic="AND">
                    <!-- engine running: manifold always open -->
                    /fdm/jsbsim/propulsion/engine/set-running  EQ   0
                </test>
                <test logic="OR">
                    <!-- engine flooded or not primed correctly: manifold closed -->
                    /systems/fuel/engine-flooded  EQ  1
                    /systems/fuel/engine-primed  EQ  0
                </test>
            </test>
            <output>/fdm/jsbsim/propulsion/tank[5]/priority</output>   
        </switch>
        
        <!-- Temperature influences how much priming is needed -->
        <!-- TODO: Table values are completely made up. -->
        <fcs_function name="/systems/fuel/priming-temperature-threshold">
            <function>
                <table>
                    <independentVar lookup="row">/engines/engine/oil-temperature-degf</independentVar>
                    <tableData>
                        <!-- info: accoring to POH (4-33) one should use a external heater below 20°F / -6°C) -->
                         19.4    74.9   <!-- -7°C -->
                         23.0    68.0   <!-- -5°C -->
                         32.0    56.0   <!--  0°C -->
                         50.0    42.5   <!-- 10°C -->
                         68.0    35.0   <!-- 20°C -->
                         75.0     0.0   <!-- 24°C --> <!-- engine is considered "hot" and dont need priming - if there is still fuel in the manifold -->
                         86.0     0.0   <!-- 30°C -->
                    </tableData>
                </table>
            </function>
            <output>/systems/fuel/priming-temperature-threshold</output>   
        </fcs_function>
        
        
      
        <!-- support POH handling of emptying the manifold when flooded -->
        <!-- If engine floods, turn off auxiliary fuel pump, place mixture In idle cutoff, open throttle 1⁄2 to full, and crank engine. When engine fires, advance mixture to full rich and retard throttle promptly -->
        <switch name="fuel/manifold-flooded-empty-cranking-rate-pps">
            <default value="0"/>
            <test logic="AND" value="fuel/manifold-flooded-empty-cranking-rate-throttle-pps">
                /engines/engine/cranking          EQ  1
                /systems/fuel/engine-flooded      EQ  1
                /controls/engines/engine/mixture-lever  LE  0.0
                /controls/engines/engine/throttle GE  0.499
            </test>
            <test logic="AND" value="-fuel/manifold-flooded-empty-cranking-rate-throttle-pps">
                /engines/engine/cranking          EQ  1
                /systems/fuel/engine-flooded      EQ  1
                /controls/engines/engine/mixture-lever  GE  0.01
            </test>
        </switch>
        <fcs_function name="fuel/manifold-flooded-empty-cranking-rate-throttle-pps">
            <function>
                <product>
                    <value>0.0075</value> <!-- defines how fast the manifold is emptied when cranking -->
                    <property>/controls/engines/engine/throttle</property>
                </product>
            </function>
            <output>fuel/manifold-flooded-empty-cranking-rate-throttle-pps</output>   
        </fcs_function>
        
        <!-- Calculates the priming flow depending on selected mixture -->
        <!-- The priming-mixture-flow-pps property is used to actually fill the manifold -->
        <fcs_function name="/systems/fuel/priming-mixture-flow-pps">
            <function>
                <product>
                    <property>/controls/engines/engine/mixture-lever</property>
                    <property>/controls/engines/engine/throttle</property>
                    <value>0.125</value>
                </product>
            </function>
            <output>/systems/fuel/priming-mixture-flow-pps</output>   
        </fcs_function>

        
        
        
        <!-- #################################################### -->
        <!-- #  MIXTURE CONTROL UNIT (mixture flow to engine)   # -->
        <!-- #################################################### -->
        <!-- Supports engine firing when cranking and priming is OK despite mixture lever is 0%. The mixture is normally
             the value from the lever. However, before the engine fires, the mixture is calculated and higher. This allows
             the engine to fire at mixture=0% like the POH tells us. This approach also automatically supports high altitude
             airports, where the engine will die more quickly. -->
        
        <!-- TANK #6:  State of the virtual mixture setting tank used for initial mixture after engine start
             this tank is used as a workaround until i figure out of to code that with functions.
             the intend is to use the tank level value directly as "minimum mixture" setting after
             the engine fires, so it can actually fire at 0% mixture lever settings (see POH).
             After the engine started, the tank drains thus leaning mixture from the engine until
             it hits its "lower end" which is the actual mixture lever setting. -->
        <switch name="/controls/engines/engine/mixture-manifold-change-rate">
            <default value="0"/>
            <!-- tank gets filled instantly when cranking and engine is off -->
            <!-- i.e. the mixture-shortly-after-start-setting will be reset so engine may fire again -->
            <test logic="AND" value="10">
                /fdm/jsbsim/propulsion/engine/set-running  EQ  0
                /engines/engine/cranking                   EQ  1
            </test>
            
            <!-- tank drains slowly (thus leaning mixture) when engine is on -->
            <!-- contents is 0.001lbs; adjust this to define time span before engine dies after firing with mix=0% -->
            <test logic="AND" value="-0.00025">
                /fdm/jsbsim/propulsion/engine/set-running  EQ  1
            </test>
            
            <output>/fdm/jsbsim/propulsion/tank[6]/external-flow-rate-pps</output>
        </switch>
        
        <!-- Calculates the mixture setting fed to the engine -->
        <!-- Either this is the value from the shortly-after-start-setting or the actual mixer,
             whichever is higher. As the after-start-setting will drop after the engine fires,
             it soon will floor at the actual mixture setting, handing over control to the pilot -->
        <fcs_function name="/controls/engines/engine/mixture-shortly-after-start-setting">
            <function>
                <max>
                    <property>/controls/engines/engine/mixture-lever</property>
                    <product>
                        <property>/fdm/jsbsim/propulsion/tank[6]/pct-full</property>
                        <value>0.01</value> <!-- percent to decimal -->
                    </product>
                </max>
            </function>
            <output>/controls/engines/engine/mixture</output>   
        </fcs_function>
        
        
        <!-- Engine starts coughing shortly before it runs dry -->
        <!-- The fuctins intend is to adjust the cough time with RPM so it gives just a brief cough short before death -->
        <fcs_function name="/engines/engine/engine-cough-low-fuel-limit">
            <function>
                <table>
                    <independentVar lookup="row">/engines/engine/rpm</independentVar>
                    <tableData>
                        1000    0.005
                        2500    0.035
                    </tableData>
                </table>
            </function>
            <output>/engines/engine/engine-cough-low-fuel-limit</output>   
        </fcs_function>
       
        
        <!-- CALCULATE INDICATED FUEL FLOW -->
        <!-- either from normal engine operation or priming:
              - the current fuel flow should follow some bell courve, topping out at a characteristic moment (3-5secs at correct setings)
              - the current courve value is calculated by a function depending on the current manifold fill level (simulates priming grade)
              - the resulting value is then transfered into a GPH setting showed on the gauge
              - the kinematic is used to "dampen" the needle movement in priming mode. Its just cosmetics.
             Please note, that all those components should probably be consolidated into an easier implementation.
        -->
        
        <!-- get current priming state (how much of the needed priming is applied already?) -->
        <fcs_function name="/systems/fuel/priming-state-pct-raw">
            <function>
                <quotient>
                    <property>/fdm/jsbsim/propulsion/tank[5]/pct-full</property>
                    <!--<property>/systems/fuel/priming-temperature-threshold</property>  alternatively use current-primed-grade, if the stabilization is always a sign of "primed" state? -->
                    <value>40</value> <!-- at 60°F (=~15°C) we currently need ~38% manifold fill, colder->more -->
                </quotient>
            </function>
            <clipto>
                <min>0</min>
                <max>1</max>
            </clipto>
            <output>/systems/fuel/priming-state-pct-raw</output>   
        </fcs_function>
        
        <!-- calculate priming-state-position in bell courve (y=-x² + 2x); where: x=tank_full/priming_threshold -->
        <fcs_function name="/systems/fuel/priming-state-pct">
            <function>
                <sum>
                    <product>
                        <value>-1</value>
                        <pow>
                            <property>/systems/fuel/priming-state-pct-raw</property>
                            <value>2</value>
                        </pow>
                    </product>
                    <product>
                        <value>2</value>
                        <property>/systems/fuel/priming-state-pct-raw</property>
                    </product>
                </sum>
            </function>
            <clipto>
                <min>0</min>
                <max>1</max>
            </clipto>
            <output>/systems/fuel/priming-state-pct</output>   
        </fcs_function>
        
        <!-- calculate the GPH-setting for the position on the bell courve;
             this is the current fraction (->positioin-pct) of the pps-flow.
             Essentially this combines the pps flow with the indicated value on the fuel flow courve! -->
        <fcs_function name="/systems/fuel/priming-mixture-flow-gph">
            <function>
                <product>
                    <property>/systems/fuel/priming-state-pct</property>
                    <product>
                        <!-- pps to gph: (lbh->gph=0.17: pps/60/60=lbh; ) -->
                        <property>/systems/fuel/priming-mixture-flow-pps</property>
                        <value>612</value>
                    </product>
                </product>
            </function>
            <output>/systems/fuel/priming-mixture-flow-gph</output>   
        </fcs_function>

        <!-- kinematic to visually dampen off the needle movement for a nicer picture -->
        <!--   the switch switches the input  to the kinematic -->
        <!-- Note: this all looks more complicated that i think it should be. the problem seems that the kinematic needs a value betweeen 0.0 and 1.0 to traverse, and thus the GPH value needs to be converted twice... -->
        <switch name="/systems/fuel/priming-mixture-flow-gph-kinematic-input">
            <default value="/fdm/jsbsim/propulsion/engine/fuel-flow-rate-gph"/> <!-- normal engine operation -->
            <test logic="AND" value="0">                          <!-- switch to 0 GPH when manifold is full -->
                /fdm/jsbsim/propulsion/tank[5]/pct-full    GT  99.0
            </test>
            <test logic="AND" value="/systems/fuel/priming-mixture-flow-gph">   <!-- when normal priming -->
                /fdm/jsbsim/propulsion/engine/set-running  EQ   0
                /systems/electrical/outputs/fuel-pump      GT   0
                /systems/fuel/fuel-pump-aux-serviceable    EQ   1
            </test>
        </switch>
        <!-- convert the calculated value to a pct-input for the kinematic -->
        <fcs_function name="/systems/fuel/priming-mixture-flow-gph-kinematic-input-pct">
            <function>
                <quotient>
                    <property>/systems/fuel/priming-mixture-flow-gph-kinematic-input</property>
                    <value>21</value> <!-- equals max gauge value -->
                </quotient>
            </function>
            <output>/systems/fuel/priming-mixture-flow-gph-kinematic-input-pct</output>   
        </fcs_function>
        <kinematic name="/systems/fuel/priming-mixture-flow-gph-kinematic-output">
            <input>/systems/fuel/priming-mixture-flow-gph-kinematic-input-pct</input>
            <traverse>
                <setting>
                    <position>0</position>
                    <time>0</time>
                </setting>
                <setting>
                    <position>1</position>
                    <time>0.95</time>
                </setting>
            </traverse>
            <output>/systems/fuel/priming-mixture-flow-gph-kinematic-output</output>
        </kinematic>
        <!-- convert the kinematic output value a valid GPH value -->
        <fcs_function name="/systems/fuel/priming-mixture-flow-gph-kinematic">
            <function>
                <product>
                    <property>/systems/fuel/priming-mixture-flow-gph-kinematic-output</property>
                    <value>21</value> <!-- equals max gauge value -->
                </product>
            </function>
            <output>/systems/fuel/priming-mixture-flow-gph-kinematic</output>   
        </fcs_function>
        
        <!-- Finally select which value to display to the gauge -->
        <switch name="/systems/fuel/indicated-manfold-fuel-flow-gph">
            <default value="0"/>
            <test logic="AND" value="/fdm/jsbsim/propulsion/engine/fuel-flow-rate-gph">
                /fdm/jsbsim/propulsion/engine/fuel-flow-rate-gph  GT   0
            </test>
            <test logic="AND" value="/systems/fuel/priming-mixture-flow-gph-kinematic">
                /fdm/jsbsim/propulsion/engine/set-running  EQ   0
                /systems/electrical/outputs/fuel-pump      GT   0
                /systems/fuel/fuel-pump-aux-serviceable    EQ   1
            </test>
        </switch>
        
    </channel>

</system>
